{"version":3,"sources":["Authenticate.js","Tag.js","Form.js","Footer.js","App.js","serviceWorker.js","index.js","assets/ProgSocLogo.png"],"names":["Authenticate","authUser","emailHandler","passHandler","email","password","style","fontWeight","textAlign","marginBottom","src","logo","alt","width","height","onSubmit","e","preventDefault","marginRight","className","name","type","placeholder","onChange","target","value","marginTop","light","Tag","color","Form","fetchData","firebase","firestore","collection","get","then","querySnapshot","forEach","doc","setState","prevState","tagDBNames","id","tagDBColors","data","updateInput","pickColor","tagColor","hex","tagFlush","showNewTag","tagText","showError","noDups","state","tagNames","includes","toLowerCase","selectValue","tagColors","addTag","firstTag","indexOf","removeTag","length","tempNames","tempColors","pop","addNewTag","hide","renderExistingTags","map","tagName","renderTags","key","getOptions","charAt","toUpperCase","slice","addEvent","i","db","add","description","location","photo_url","photoUrl","start","Timestamp","fromDate","Date","startDate","summary","tag_colors","tag_names","set","this","float","onClick","props","logOut","htmlFor","required","rows","display","justifyContent","alignItems","paddingTop","paddingBottom","onChangeComplete","React","Component","footerStyle","fontSize","paddingLeft","Footer","getFullYear","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","App","useState","isLoggedIn","setLog","setEmail","setPass","setShowError","useEffect","onAuthStateChanged","user","signOut","catch","error","errorCode","code","errorMessage","message","console","log","signInWithEmailAndPassword","setTimeout","pass","position","bottom","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"+QAoCeA,MAhCf,YAA+E,IAAxDC,EAAuD,EAAvDA,SAAUC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAiB/D,OACI,6BACA,wBAAIC,MAAO,CAACC,WAAY,UAAWC,UAAW,SAAUC,aAAc,SAAS,yBAAKC,IAAKC,IAAMC,IAAI,eAAeC,MAAM,QAAQC,OAAO,UAAvI,UACA,0BAAMC,SARO,SAAAC,GACfA,EAAEC,iBACFhB,EAASG,EAAOC,KAOV,yBAAKC,MAAO,CAACY,YAAa,QAAQ,wBAAIZ,MAAO,CAACC,WAAW,WAAvB,UAClC,6BAAK,2BAAOY,UAAU,aAAaC,KAAK,aAAaC,KAAK,QAAQC,YAAY,aAAaC,SApB1E,SAAAP,GACvBA,EAAEC,iBACFf,EAAac,EAAEQ,OAAOC,WAmBhB,yBAAKnB,MAAO,CAACY,YAAa,MAAOQ,UAAU,SAAS,wBAAIpB,MAAO,CAACC,WAAW,WAAvB,aACpD,6BAAK,2BAAOY,UAAU,aAAaE,KAAK,WAAWC,YAAY,gBAAgBC,SAjB/D,SAAAP,GACtBA,EAAEC,iBACFd,EAAYa,EAAEQ,OAAOC,WAgBf,6BACA,4BAAQN,UAAU,aAAaE,KAAK,SAASf,MAAO,CAACoB,UAAU,SAA/D,a,oFC5BNC,EAAQ,CACVpB,WAAY,WAWDqB,MARf,YAA6B,IAAfR,EAAc,EAAdA,KAAMS,EAAQ,EAARA,MAChB,OACI,6BACI,wBAAIvB,MAAOqB,GAAX,UAAyB,0BAAMrB,MAAO,CAACC,WAAW,WAAYa,GAA9D,YAAmF,0BAAMd,MAAO,CAACC,WAAW,WAAYsB,MCD9HF,EAAQ,CACVpB,WAAY,UACZC,UAAW,UA0PAsB,E,kDAtPX,aAAe,IAAD,8BACV,gBAuBJC,UAAY,WACGC,IAASC,YACjBC,WAAW,QAAQC,MAAMC,MAAK,SAAAC,GAC7BA,EAAcC,SAAQ,SAAAC,GAClB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBC,WAAW,GAAD,mBAAMD,EAAUC,YAAhB,CAA4BH,EAAII,KAC1CC,YAAY,GAAD,mBAAMH,EAAUG,aAAhB,CAA6BL,EAAIM,oBA9B9C,EA0CdC,YAAc,SAAA9B,GACV,EAAKwB,SAAL,eAAgBxB,EAAEQ,OAAOJ,KAAOJ,EAAEQ,OAAOC,SA3C/B,EA8CdsB,UAAY,SAAAlB,GACR,EAAKW,SAAS,CAACQ,SAAUnB,EAAMoB,OA/CrB,EAoDdC,SAAW,WACP,EAAKV,SAAS,CACVW,YAAY,EACZC,QAAS,GACTJ,SAAU,GACVK,WAAW,KAzDL,EA6DdC,OAAS,WACL,OAAQ,EAAKC,MAAMC,SAASC,SAAS,EAAKF,MAAMH,QAAQM,iBAAmB,EAAKH,MAAMC,SAASC,SAAS,EAAKF,MAAMI,eAC/G,EAAKJ,MAAMK,UAAUH,SAAS,EAAKF,MAAMP,YAAc,EAAKO,MAAMb,WAAWe,SAAS,EAAKF,MAAMH,QAAQM,iBAC5G,EAAKH,MAAMX,YAAYa,SAAS,EAAKF,MAAMP,WAhElC,EAmEda,OAAS,SAAA7C,GACLA,EAAEC,iBAC6B,KAA3B,EAAKsC,MAAMI,aAAsB,EAAKL,UACtC,EAAKd,SAAS,CAACsB,UAAU,IACzB,EAAKtB,UAAS,SAAAC,GAAS,MAAK,CACxBe,SAAS,GAAD,mBAAMf,EAAUe,UAAhB,CAA0B,EAAKD,MAAMI,cAC7CC,UAAU,GAAD,mBAAMnB,EAAUmB,WAAhB,CAA2B,EAAKL,MAAMX,YAAY,EAAKW,MAAMb,WAAWqB,QAAQ,EAAKR,MAAMI,cAAc9B,YAEtH,EAAKqB,YAGsB,KAAvB,EAAKK,MAAMH,SAA0C,KAAxB,EAAKG,MAAMP,UAAoB,EAAKM,UAIjE,EAAKd,SAAS,CAACsB,UAAU,IACzB,EAAKtB,UAAS,SAAAC,GAAS,MAAK,CACxBe,SAAS,GAAD,mBAAMf,EAAUe,UAAhB,CAA0B,EAAKD,MAAMH,QAAQM,gBACrDE,UAAU,GAAD,mBAAMnB,EAAUmB,WAAhB,CAA2B,EAAKL,MAAMP,eAEnD,EAAKE,YARL,EAAKV,SAAS,CAACa,WAAW,EAAMD,QAAS,MA/EvC,EA4FdY,UAAY,SAAAhD,GAGR,GAFAA,EAAEC,iBAEE,EAAKsC,MAAMC,SAASS,OAAS,EAAG,CAChC,IAAIC,EAAS,YAAO,EAAKX,MAAMC,UAC3BW,EAAU,YAAO,EAAKZ,MAAMK,WAChCM,EAAUE,MACVD,EAAWC,MACc,IAArBF,EAAUD,QACV,EAAKzB,SAAS,CAACsB,UAAU,IAE7B,EAAKtB,SAAS,CAACgB,SAAUU,EAAWN,UAAWO,MAvGzC,EA2GdE,UAAY,SAAArD,GACRA,EAAEC,iBACF,EAAKuB,SAAS,CAACW,YAAY,EAAMQ,YAAa,MA7GpC,EAgHdW,KAAO,SAAAtD,GACHA,EAAEC,iBACF,EAAKuB,SAAS,CAACW,YAAY,KAlHjB,EAqHdoB,mBAAqB,WACjB,OAAO,EAAKhB,MAAMb,WAAW8B,KAAI,SAACC,EAAS9B,GAAV,OAAiB,kBAAC,EAAD,CAAKvB,KAAMqD,EAAS5C,MAAO,EAAK0B,MAAMX,YAAYD,GAAId,YAtH9F,EAyHd6C,WAAa,WACT,OAAO,EAAKnB,MAAMC,SAASgB,KAAI,SAACC,EAAS9B,GAAV,OAAiB,kBAAC,EAAD,CAAKvB,KAAMqD,EAAS5C,MAAO,EAAK0B,MAAMK,UAAUjB,GAAKgC,IAAKhC,QA1HhG,EA6HdiC,WAAa,WACT,OAAO,EAAKrB,MAAMb,WAAW8B,KAAI,SAACC,EAAS9B,GAAV,OAAiB,4BAAQgC,IAAKhC,EAAIlB,MAAOgD,GAAUA,EAAQI,OAAO,GAAGC,cAAcL,EAAQM,MAAM,QA9HxH,EAiIdC,SAAW,SAAAhE,GACPA,EAAEC,iBACF,IAWIgE,EAXEC,EAAKlD,IAASC,YAYpB,IAXAiD,EAAGhD,WAAW,UAAUiD,IAAI,CACxBC,YAAa,EAAK7B,MAAM6B,YACxBC,SAAU,EAAK9B,MAAM8B,SACrBjE,KAAM,EAAKmC,MAAMnC,KACjBkE,UAAW,EAAK/B,MAAMgC,SACtBC,MAAOxD,IAASC,UAAUwD,UAAUC,SAAS,IAAIC,KAAK,EAAKpC,MAAMqC,YACjEC,QAAS,EAAKtC,MAAMsC,QACpBC,WAAY,EAAKvC,MAAMK,UACvBmC,UAAW,EAAKxC,MAAMC,WAGrByB,EAAE,EAAEA,EAAE,EAAK1B,MAAMC,SAASS,OAAOgB,IAAK,CACvC,IAAIR,EAAU,EAAKlB,MAAMC,SAASyB,GAC9BjC,EAAW,EAAKO,MAAMK,UAAUqB,GAC/B,EAAK1B,MAAMb,WAAWe,SAASgB,IAChCS,EAAGhD,WAAW,QAAQK,IAAIkC,GAASuB,IAAI,CAACnE,MAAOmB,IAIvD,EAAKR,SAAS,CACV4C,YAAa,GACbC,SAAU,GACVjE,KAAM,GACNmE,SAAU,GACVK,UAAW,IAAID,KACfE,QAAS,GACTlC,YAAa,GACbP,QAAS,GACTJ,SAAU,GACVQ,SAAU,GACVI,UAAW,GACXT,YAAY,EACZW,UAAU,EACVT,WAAW,KAnKf,EAAKE,MAAQ,CACT6B,YAAa,GACbC,SAAU,GACVjE,KAAM,GACNmE,SAAU,GACVK,UAAW,IAAID,KACfE,QAAS,GACTlC,YAAa,GACbP,QAAS,GACTJ,SAAU,GACVQ,SAAU,GACVd,WAAY,GACZkB,UAAW,GACXhB,YAAa,GACbO,YAAY,EACZW,UAAU,EACVT,WAAW,GAlBL,E,gEAqCV4C,KAAKlE,c,+BAuIL,OACI,yBAAKZ,UAAU,YACX,4BAAQA,UAAU,aAAab,MAAO,CAAC4F,MAAM,QAASxE,UAAU,QAASyE,QAASF,KAAKG,MAAMC,QAA7F,WACA,wBAAI/F,MAAOqB,GAAX,IAAmB,yBAAKjB,IAAKC,IAAMC,IAAI,eAAeC,MAAM,QAAQC,OAAO,UAA3E,kBACA,6BACI,0BAAMC,SAAUkF,KAAKjB,UACrB,yBAAK7D,UAAU,YACP,2BAAOA,UAAU,WAAWmF,QAAQ,QAApC,QAAuD,6BACvD,2BAAOC,UAAQ,EAACnF,KAAK,OAAOC,KAAK,OACjCE,SAAU0E,KAAKnD,YAAarB,MAAOwE,KAAK1C,MAAMnC,QAElD,yBAAKD,UAAU,YACX,2BAAOA,UAAU,WAAWmF,QAAQ,eAApC,eAAqE,6BACrE,8BAAUC,UAAQ,EAACnF,KAAK,cAAcC,KAAK,OAAOmF,KAAK,IACvDjF,SAAU0E,KAAKnD,YAAarB,MAAOwE,KAAK1C,MAAM6B,eAElD,yBAAKjE,UAAU,YACX,2BAAOA,UAAU,WAAWmF,QAAQ,YAApC,YAA+D,6BAC/D,2BAAOC,UAAQ,EAACnF,KAAK,WAAWC,KAAK,OACrCE,SAAU0E,KAAKnD,YAAarB,MAAOwE,KAAK1C,MAAM8B,YAElD,yBAAKlE,UAAU,YACX,2BAAOA,UAAU,WAAWmF,QAAQ,aAApC,cAAkE,6BAClE,2BAAOC,UAAQ,EAACnF,KAAK,YAAYC,KAAK,iBACtCE,SAAU0E,KAAKnD,YAAarB,MAAOwE,KAAK1C,MAAMqC,aAElD,yBAAKzE,UAAU,YACX,2BAAOmF,QAAQ,WAAf,WAAwC,6BACxC,2BAAOlF,KAAK,UAAUC,KAAK,OAC3BE,SAAU0E,KAAKnD,YAAarB,MAAOwE,KAAK1C,MAAMsC,WAElD,yBAAK1E,UAAU,YACX,2BAAOmF,QAAQ,YAAf,aAA2C,6BAC3C,2BAAOlF,KAAK,WAAWC,KAAK,MAC5BE,SAAU0E,KAAKnD,YAAarB,MAAOwE,KAAK1C,MAAMgC,YAElD,yBAAKpE,UAAU,YACX,2BAAOmF,QAAQ,eAAf,QAAyC,6BACzC,4BAAQnF,UAAU,cAAcC,KAAK,cAAcG,SAAU0E,KAAKnD,YAAarB,MAAOwE,KAAK1C,MAAMI,aAC7F,4BAAQlC,MAAM,IAAd,QACCwE,KAAKrB,eAGbqB,KAAK1C,MAAMJ,WAAc,yBAAKhC,UAAU,YACrC,2BAAOmF,QAAQ,WAAf,WAAwC,6BACxC,2BAAOlF,KAAK,UAAUC,KAAK,OAC3BE,SAAU0E,KAAKnD,YAAarB,MAAOwE,KAAK1C,MAAMH,WACrC,KACb,6BACK6C,KAAK1C,MAAMF,UAAY,6BACpB,wBAAI/C,MAAO,CAACC,WAAW,MAAOsB,MAAM,QAApC,oCACA,wBAAIvB,MAAOqB,GAAX,iBACCsE,KAAK1B,sBACG,KACX0B,KAAK1C,MAAMO,SAA8C,KAAnC,wBAAIxD,MAAOqB,GAAX,aACvBsE,KAAK1C,MAAMC,SAASS,QAAU,EAAIgC,KAAKvB,aAAe,KACtDuB,KAAK1C,MAAMJ,WAAa,6BACrB,wBAAI7C,MAAOqB,GAAX,qBACA,yBAAKrB,MAAO,CAACmG,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,WAAY,MAAOC,cAAe,SAChH,kBAAC,eAAD,CAAcC,iBAAkBb,KAAKlD,cAC5B,KACb,4BAAQ5B,UAAU,uBAAuBgF,QAASF,KAAKpC,QAAvD,WACA,4BAAQ1C,UAAU,uBAAuBgF,QAASF,KAAKjC,WAAvD,mBACCiC,KAAK1C,MAAMJ,WAAa,4BAAQhC,UAAU,uBAAuBgF,QAASF,KAAK3B,MAAvD,QACzB,4BAAQnD,UAAU,uBAAuBgF,QAASF,KAAK5B,WAAvD,gBAEJ,4BAAQlD,UAAU,yBAAyBE,KAAK,UAAhD,oB,GA/OL0F,IAAMC,WCXnBC,EAAc,CAChBC,SAAU,QACVrF,MAAO,UACPsF,YAAa,QASFC,MANf,WACI,OACI,uBAAG9G,MAAO2G,GAAV,SAA+B,IAAItB,MAAO0B,cAA1C,W,OCURrF,IAASsF,cAXc,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAIjB,IAAMC,EAAO/F,IAAS+F,OAmEPC,MAjEf,WAAgB,IAAD,EACgBC,oBAAS,GADzB,mBACNC,EADM,KACMC,EADN,OAEaF,mBAAS,IAFtB,mBAEN7H,EAFM,KAECgI,EAFD,OAGeH,mBAAS,IAHxB,mBAGN5H,EAHM,KAGIgI,EAHJ,OAIqBJ,oBAAS,GAJ9B,mBAIN5E,EAJM,KAIKiF,EAJL,KA6Cb,OAvCAC,qBAAU,WACRR,EAAKS,oBAAmB,SAAAC,GAClBA,GACFN,GAAO,GACPG,GAAa,IAEbH,GAAO,QAGV,IA8BCD,EAEA,6BACE,kBAAC,EAAD,CAAM7B,OAdG,WACb0B,EAAKW,UAAUC,OAAM,SAAAC,GACnB,IAAMC,EAAYD,EAAME,KAClBC,EAAeH,EAAMI,QAC3BC,QAAQC,IAAIL,GACZI,QAAQC,IAAIH,MAEdX,EAAS,IACTC,EAAQ,OAOJ,kBAAC,EAAD,OAKF,6BACE,kBAAC,EAAD,CAAcpI,SAtCH,SAACG,EAAOC,GACvB0H,EAAKoB,2BAA2B/I,EAAOC,GAAUsI,OAAM,SAAAC,GACrDN,GAAa,GACbc,YAAW,WACTd,GAAa,KACZ,SAiCiCpI,aA7BnB,SAAAE,GACnBgI,EAAShI,IA6BLD,YA1Bc,SAAAkJ,GAClBhB,EAAQgB,IAyBsBjJ,MAAOA,EAAOC,SAAUA,IAClD,wBAAIc,UAAWkC,EAAY,aAAe,aAC1C/C,MAAO,CAACC,WAAY,UAAWsB,MAAO,MAAOrB,UAAW,WADxD,mDAEA,yBAAKF,MAAO,CAACgJ,SAAU,QAASC,OAAQ,MAAM,kBAAC,EAAD,S,OCtElCC,QACW,cAA7BC,OAAOpE,SAASqE,UAEe,UAA7BD,OAAOpE,SAASqE,UAEhBD,OAAOpE,SAASqE,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,cD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9H,MAAK,SAAA+H,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACLK,QAAQL,MAAMA,EAAMI,a,mBEzI5BqB,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.f23ccd17.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport logo from './assets/ProgSocLogo.png';\n\nfunction Authenticate({authUser, emailHandler, passHandler, email, password}) {\n   \n    const updateEmailInput = e => {\n      e.preventDefault()\n      emailHandler(e.target.value)\n    }\n  \n    const updatePassInput = e => {\n      e.preventDefault()\n      passHandler(e.target.value)\n    }\n  \n    const onSubmit = e => {\n      e.preventDefault()\n      authUser(email, password)\n    }\n  \n    return (\n        <div>\n        <h1 style={{fontWeight: 'lighter', textAlign: 'center', marginBottom: '30px'}}><img src={logo} alt='progsoc-logo' width='100px' height='100px'/> Login</h1>\n        <form onSubmit={onSubmit}>\n            <div style={{marginRight: '48%'}}><h3 style={{fontWeight:'normal'}}>Email</h3></div>\n            <div><input className='loginInput' name='emailInput' type='email' placeholder='Your email' onChange={updateEmailInput}></input></div>\n            <div style={{marginRight: '45%', marginTop:'30px'}}><h3 style={{fontWeight:'normal'}}>Password</h3></div>\n            <div><input className='loginInput' type='password' placeholder='Your password' onChange={updatePassInput}></input></div>\n            <br/>\n            <button className='coolButton' type='submit' style={{marginTop:'30px'}}>Log In</button>\n        </form>\n        </div>\n    )\n}\n\nexport default Authenticate;\n\n","import React from 'react'\n\nconst light = {\n    fontWeight: 'lighter'\n}\n\nfunction Tag({name, color}) {\n    return (\n        <div>\n            <h4 style={light}> name: <span style={{fontWeight:'normal'}}>{name}</span>, color: <span style={{fontWeight:'normal'}}>{color}</span></h4>\n        </div>\n    )\n}\n\nexport default Tag;","import React from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport logo from './assets/ProgSocLogo.png';\nimport { CirclePicker } from 'react-color';\nimport Tag from './Tag';\nimport './App.css';\n\nconst light = {\n    fontWeight: 'lighter',\n    textAlign: 'center'\n}\n\nclass Form extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            description: '',\n            location: '',\n            name: '',\n            photoUrl: '',\n            startDate: new Date(),\n            summary: '',\n            selectValue: '',\n            tagText: '',\n            tagColor: '',\n            tagNames: [],\n            tagDBNames: [],\n            tagColors: [],\n            tagDBColors: [],\n            showNewTag: false,\n            firstTag: true,\n            showError: false\n        }\n    }\n\n    // fetch tag db\n\n    fetchData = () => {\n        const db = firebase.firestore();\n        db.collection('tags').get().then(querySnapshot => {\n            querySnapshot.forEach(doc => {\n                this.setState(prevState => ({\n                    tagDBNames: [...prevState.tagDBNames, doc.id],\n                    tagDBColors: [...prevState.tagDBColors, doc.data()]\n                }))\n            })\n        })\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    // various handlers for changing state after buttons are clicked\n\n    updateInput = e => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    pickColor = color => {\n        this.setState({tagColor: color.hex})\n    }\n\n    // helper for addTag\n\n    tagFlush = () => {\n        this.setState({\n            showNewTag: false,\n            tagText: '',\n            tagColor: '',\n            showError: false\n        })\n    }\n\n    noDups = () => {\n        return !this.state.tagNames.includes(this.state.tagText.toLowerCase()) && !this.state.tagNames.includes(this.state.selectValue) \n        && !this.state.tagColors.includes(this.state.tagColor) && !this.state.tagDBNames.includes(this.state.tagText.toLowerCase()) && \n        !this.state.tagDBColors.includes(this.state.tagColor)\n    }\n\n    addTag = e => {\n        e.preventDefault();\n        if (this.state.selectValue !== '' && this.noDups()) {\n            this.setState({firstTag: false})\n            this.setState(prevState => ({\n                tagNames: [...prevState.tagNames, this.state.selectValue],\n                tagColors: [...prevState.tagColors, this.state.tagDBColors[this.state.tagDBNames.indexOf(this.state.selectValue)].color]\n            }))\n            this.tagFlush();\n        } else {\n\n            if (this.state.tagText === '' || this.state.tagColor === '' || !this.noDups())  {\n                this.setState({showError: true, tagText: ''})\n            } \n            else {\n                this.setState({firstTag: false})\n                this.setState(prevState => ({\n                    tagNames: [...prevState.tagNames, this.state.tagText.toLowerCase()],\n                    tagColors: [...prevState.tagColors, this.state.tagColor]\n                }))\n                this.tagFlush();\n            }\n        }    \n    }\n\n    removeTag = e => {\n        e.preventDefault();\n\n        if (this.state.tagNames.length > 0) {\n            let tempNames = [...this.state.tagNames]\n            let tempColors = [...this.state.tagColors]\n            tempNames.pop()\n            tempColors.pop()\n            if (tempNames.length === 0) {\n                this.setState({firstTag: true})\n            }\n            this.setState({tagNames: tempNames, tagColors: tempColors})\n        } \n    }\n\n    addNewTag = e => {\n        e.preventDefault();\n        this.setState({showNewTag: true, selectValue: ''})\n    }\n\n    hide = e => {\n        e.preventDefault();\n        this.setState({showNewTag: false})\n    }\n\n    renderExistingTags = () => {\n        return this.state.tagDBNames.map((tagName, id) => <Tag name={tagName} color={this.state.tagDBColors[id].color}/>)\n    }\n\n    renderTags = () => {\n        return this.state.tagNames.map((tagName, id) => <Tag name={tagName} color={this.state.tagColors[id]} key={id}/>)\n    }\n\n    getOptions = () => {\n        return this.state.tagDBNames.map((tagName, id) => <option key={id} value={tagName}>{tagName.charAt(0).toUpperCase()+tagName.slice(1)}</option>)\n    }\n\n    addEvent = e => {\n        e.preventDefault();\n        const db = firebase.firestore();\n        db.collection('events').add({\n            description: this.state.description,\n            location: this.state.location,\n            name: this.state.name,\n            photo_url: this.state.photoUrl,\n            start: firebase.firestore.Timestamp.fromDate(new Date(this.state.startDate)),\n            summary: this.state.summary,\n            tag_colors: this.state.tagColors,\n            tag_names: this.state.tagNames\n        });\n        let i;\n        for (i=0;i<this.state.tagNames.length;i++) {\n            let tagName = this.state.tagNames[i]\n            let tagColor = this.state.tagColors[i]\n            if (!this.state.tagDBNames.includes(tagName)) {\n                db.collection('tags').doc(tagName).set({color: tagColor})\n            }\n            \n        }\n        this.setState({\n            description: '',\n            location: '',\n            name: '',\n            photoUrl: '',\n            startDate: new Date(),\n            summary: '',\n            selectValue: '',\n            tagText: '',\n            tagColor: '',\n            tagNames: [],\n            tagColors: [],\n            showNewTag: false,\n            firstTag: true,\n            showError: false\n        })\n    }\n\n    // renders the form\n\n    render() {\n        return (\n            <div className='inputDiv'>\n                <button className='coolButton' style={{float:'right', marginTop:'55px'}} onClick={this.props.logOut}>Log Out</button>\n                <h1 style={light}> <img src={logo} alt='progsoc-logo' width='100px' height='100px'/> Event Creator</h1>\n                <div>\n                    <form onSubmit={this.addEvent}>\n                    <div className='inputDiv'>\n                            <label className='required' htmlFor='name'>Name</label><br/>\n                            <input required name='name' type='text' \n                            onChange={this.updateInput} value={this.state.name}></input>\n                        </div>\n                        <div className='inputDiv'>\n                            <label className='required' htmlFor='description'>Description</label><br/>\n                            <textarea required name='description' type='text' rows='5'\n                            onChange={this.updateInput} value={this.state.description}></textarea>\n                        </div>\n                        <div className='inputDiv'>\n                            <label className='required' htmlFor='location'>Location</label><br/>\n                            <input required name='location' type='text' \n                            onChange={this.updateInput} value={this.state.location}></input>\n                        </div>\n                        <div className='inputDiv'>\n                            <label className='required' htmlFor='startDate'>Start Date</label><br/>\n                            <input required name='startDate' type='datetime-local' \n                            onChange={this.updateInput} value={this.state.startDate}></input>\n                        </div>\n                        <div className='inputDiv'>\n                            <label htmlFor='summary'>Summary</label><br/>\n                            <input name='summary' type='text' \n                            onChange={this.updateInput} value={this.state.summary}></input>\n                        </div>\n                        <div className='inputDiv'>\n                            <label htmlFor='photoUrl'>Photo URL</label><br/>\n                            <input name='photoUrl' type='url' \n                            onChange={this.updateInput} value={this.state.photoUrl}></input>\n                        </div>\n                        <div className='inputDiv'>\n                            <label htmlFor='selectValue'>Tags</label><br/>\n                            <select className='selectInput' name='selectValue' onChange={this.updateInput} value={this.state.selectValue}>\n                                <option value=''>None</option>\n                                {this.getOptions()}\n                            </select>\n                        </div>\n                        {this.state.showNewTag ?  <div className='inputDiv'>\n                            <label htmlFor='tagText'>New Tag</label><br/>\n                            <input name='tagText' type='text' \n                            onChange={this.updateInput} value={this.state.tagText}></input>\n                            </div> : null}\n                        <div>\n                            {this.state.showError ? <div>\n                                <h3 style={{fontWeight:'300', color:'red'}}>Tags need a new name and colour!</h3> \n                                <h2 style={light}>Existing Tags</h2>\n                                {this.renderExistingTags()}\n                                </div> : null}\n                            {!this.state.firstTag ? <h2 style={light}>Your Tags</h2> : null}\n                            {this.state.tagNames.length >= 0 ? this.renderTags() : null}\n                            {this.state.showNewTag ? <div>\n                                <h2 style={light}>Select Tag Colour</h2> \n                                <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", paddingTop: '5px', paddingBottom: '20px'}}>\n                                <CirclePicker onChangeComplete={this.pickColor}/></div>\n                                </div> : null}\n                            <button className='tagButton coolButton' onClick={this.addTag}>Add Tag</button>\n                            <button className='tagButton coolButton' onClick={this.removeTag}>Remove Last Tag</button>\n                            {this.state.showNewTag ? <button className='tagButton coolButton' onClick={this.hide}>Hide</button> : \n                            <button className='tagButton coolButton' onClick={this.addNewTag}>Add New Tag</button>}\n                        </div>\n                        <button className='eventButton coolButton' type='submit'>Add Event</button>        \n                    </form>\n                </div>\n            </div>\n        )\n    }   \n}\n\nexport default Form;","import React from 'react';\n\nconst footerStyle = {\n    fontSize: 'small',\n    color: '#6c757d',\n    paddingLeft: '10px'\n}\n\nfunction Footer() {\n    return (\n        <p style={footerStyle}>&copy; {new Date().getFullYear()} EUPS </p>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Authenticate from './Authenticate';\nimport Form from './Form';\nimport Footer from './Footer';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAOYtNKsCiwjosXZEsS7Zw-vyrABepxZXQ\",\n  authDomain: \"prog-soc-site.firebaseapp.com\",\n  databaseURL: \"https://prog-soc-site.firebaseio.com\",\n  projectId: \"prog-soc-site\",\n  storageBucket: \"prog-soc-site.appspot.com\",\n  messagingSenderId: \"1050991347056\",\n  appId: \"1:1050991347056:web:e0a9a55f015c36c1c3bbb5\",\n  measurementId: \"G-MDS039HCQZ\"\n}\n\nfirebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\n\nfunction App() {\n  const [isLoggedIn, setLog] = useState(false)\n  const [email, setEmail] = useState('')\n  const [password, setPass] = useState('')\n  const [showError, setShowError] = useState(false)\n\n  useEffect(() => {\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        setLog(true)\n        setShowError(false)\n      } else {\n        setLog(false)\n      }\n    })\n  }, [])\n\n  const authUser = (email, password) => {\n    auth.signInWithEmailAndPassword(email, password).catch(error => {\n      setShowError(true)\n      setTimeout(() => {\n        setShowError(false)\n      }, 2000)\n    })\n  }\n\n  const emailHandler = email => {\n    setEmail(email)\n  }\n\n  const passHandler = pass => {\n    setPass(pass)\n  }\n\n  const logOut = () => {\n    auth.signOut().catch(error => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.log(errorCode);\n      console.log(errorMessage);\n    })\n    setEmail('')\n    setPass('')\n  }\n\n  if (isLoggedIn) {\n    return (\n      <div>\n        <Form logOut={logOut}/>\n        <Footer/>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <Authenticate authUser={authUser} emailHandler={emailHandler} \n        passHandler={passHandler} email={email} password={password}/> \n        <h3 className={showError ? 'show-error' : 'hide-error'} \n        style={{fontWeight: 'lighter', color: 'red', textAlign: 'center'}}>Incorrect credentials. Please check them again!</h3>\n        <div style={{position: 'fixed', bottom: '0'}}><Footer/></div>\n      </div>\n    )\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('event-app')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ProgSocLogo.f0f3a878.png\";"],"sourceRoot":""}